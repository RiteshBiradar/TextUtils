{"version":3,"sources":["components/AboutUs.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["AboutUs","myStyle","setMyStyle","useState","color","backgroundColor","text","setText","React","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","onClick","toggleMode","Navbar","props","concat","mode","Link","to","title","aria-label","aria-current","role","htmlFor","TextForm","Fragment","heading","rows","value","onChange","event","console","log","target","handleUpClick","newText","toUpperCase","showAlert","handleLowClick","toLowerCase","handleRevClick","i","length","charAt","handleCopy","document","getElementById","select","navigator","clipboard","writeText","trim","split","Alert","alert","word","newWord","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","Router","body","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.68d09b08.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nexport default function AboutUs() {\r\n\r\n    const [myStyle,setMyStyle] = useState({\r\n        color : 'black',\r\n        backgroundColor:'white',\r\n    })\r\n\r\n    const[text,setText] = useState(\"Enable Dark Mode\")\r\n\r\n    const toggleMode = () =>{\r\n        if(myStyle.color==='black'){\r\n            setMyStyle({\r\n                color : 'white',\r\n                backgroundColor:'black',\r\n            })\r\n            setText(\"Enable Light Mode\")\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color : 'black',\r\n                backgroundColor:'white',\r\n            })\r\n            setText(\"Enable Dark Mode\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <div className=\"accordion\" id=\"accordionExample\" >\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button\" type=\"button\"  style={myStyle} data-bs-toggle=\"collapse\"  data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\"  style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button collapsed\"  style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\"  style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button collapsed\"   style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\"  style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"btn btn-primary my-2\" onClick={toggleMode}>\r\n                {text}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/aboutus\">AboutUs</Link>\r\n            </li>\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode==='light'?'dark':'light'} mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () =>{\r\n        console.log(\"Uppercase button was clicked\")\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to UpperCase\",\"success\")\r\n    }\r\n\r\n    const handleLowClick = () =>{\r\n        console.log(\"Lowercase button was clicked\")\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to LowerCase\",\"success\")\r\n    }\r\n\r\n    const handleRevClick = () =>{\r\n        console.log(\"Lowercase button was clicked\")\r\n        let newText = '';\r\n        for(var i =text.length;i>=0;i--)\r\n        newText = newText+=text.charAt(i)\r\n        setText(newText)\r\n        props.showAlert(\"The text has been reversed\",\"success\")\r\n    }\r\n\r\n    // Navigator = Browser , ClipBoard = Provides an interface to interact with system clipboard\r\n    const handleCopy= () =>{\r\n        var text = document.getElementById(\"myBox\");;\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Copied to clipboard!\",\"success\")\r\n    }\r\n\r\n\r\n    const handleChange = (event) =>{\r\n    console.log(\"Change has occured in the text box\");\r\n    setText(event.target.value) //It will allow us to add new text to the already existing text in the box\r\n  }\r\n  //HandleChange imp. raheta bcz It will allow us to edit it\r\n\r\n    const [text,setText] = useState(\"\");\r\n    return (\r\n    <>\r\n    <div>\r\n    <h1>{props.heading}</h1>\r\n    <div className=\"mb-3\">\r\n    <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text}  style ={{backgroundColor:props.mode==='dark'?'#00122a':'white',color:props.mode==='dark'?'white':'black'}} onChange={handleChange}></textarea>\r\n    <button className=\"btn btn-primary my-3\" onClick={handleUpClick}> Convert to UpperCase</button>\r\n    <button className=\"btn btn-primary my-3 mx-2\" onClick={handleLowClick}> Convert to LowerCase</button>\r\n    <button className=\"btn btn-primary my-3\" onClick={handleRevClick}> Convert to Reverse</button>\r\n    <button className=\"btn btn-primary my-3 mx-2\" onClick={handleCopy}> Copy Text</button>\r\n    </div>\r\n    </div>\r\n    <div className=\"container my-3\">\r\n        <h1>Your text summary :</h1>\r\n        <p>{ text===\"\" ?0 :text.trim().split(\" \").length} words, {text.length} characters</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const newWord = word.toLowerCase();\r\n        return newWord.charAt(0).toUpperCase() + newWord.slice(1);\r\n    }\r\n\r\n    return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\" >\r\n    <strong>{capitalize(props.alert.type)} :</strong>{props.alert.msg}\r\n    </div>\r\n    )\r\n}\r\n","import { useState } from 'react';\nimport  './App.css';\nimport AboutUs from './components/AboutUs';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\" ;\nimport React from 'react';\n \n\n\nfunction App() {\n  const[mode,setMode] = useState('light')\n\n  let toggleMode = () =>{\n    if(mode==='light'){\n      setMode('dark')\n      document.body.style.backgroundColor='#00122a';\n      document.body.style.color='white';\n      showAlert(\"Dark Mode has been enabled\",\"success\")\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor='white';\n      document.body.style.color='black'\n      showAlert(\"Light Mode has been enabled\",\"success\")\n    }\n  }\n\n  const [alert,setAlert] = useState(null);\n\n  const showAlert = (message,type) =>{\n    setAlert({\n    msg: message,\n    type: type,\n    })\n\n    setTimeout(() => {\n      setAlert(null)\n    }, 1200);\n  }\n\n  return(\n    <>\n    <Router>\n    <Navbar title =\"TextUtils\" mode={mode} toggleMode = {toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-5\">\n    <div className=\"container\">\n          <Routes>\n            <Route exact path=\"/aboutus\" element={<AboutUs/>}>\n            </Route>\n            <Route exact path=\"/\" element={<TextForm heading=\"Enter the text below to analyze :\"  mode={mode} showAlert={showAlert} />}>\n            </Route>\n          </Routes>\n        </div>\n    </div>\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}